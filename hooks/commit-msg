#!/usr/bin/env bash

function hook_echo() {
	echo -e "[\e[0;32mcommit-msg\e[0m]: $1"
}

if [ $# -eq 0 ]; then
	echo 'Call this script only through "git commit".'
	exit 4
fi

function generate_timestamps() {
	# Quit if timestamping.sh is not configured
	if [ $? -ne 0 ]; then
		exit 0
	fi

	# Get current branch
	local BRANCH
	BRANCH=$(get_branch)

	# Return if already on signing branch
	if on_signing_branch; then
		exit 0
	fi

	hook_echo "Branch is ${BRANCH}"

	# Get applicable diff of staged files
	hook_echo "Creating diff"
	local DIFF
	DIFF=$(get_diff)
	if [[ $? -eq 3 ]]; then
		hook_echo 'ERROR: ts.diff.type must be either "staged" or "full"'
	fi

	# Get commit message
	local COMMIT_MSG_FILE=$1
	local COMMIT_MSG
	COMMIT_MSG=$(cat "${COMMIT_MSG_FILE}")

	# Stash changes to be committed
	! git rev-parse HEAD >/dev/null 2>/dev/null || git stash >/dev/null 2>/dev/null

	# Create signing branch if non-existent
	check_out_signing_or_root "${BRANCH}"

	# Write diff file
	write_diff "${DIFF}"

	create_and_commit_timestamps
	RETURN=$?

	# Checkout original branch
	check_out_actual "${BRANCH}"

	# Remove timestamping files
	rm -rf "${TS_SERVER_DIRECTORY:?}/" "${TS_DIFF_FILE}" ".gitattributes"
	git reset -- ${TS_SERVER_DIRECTORY:?}/* "${TS_DIFF_FILE}" ".gitattributes" >/dev/null 2>/dev/null

	# Restore original commit message
	echo "${COMMIT_MSG}" >"${COMMIT_MSG_FILE}"

	# Unstash changes to be committed
	! git rev-parse HEAD >/dev/null 2>/dev/null || git stash pop >/dev/null 2>/dev/null

	# Wait one second for different commit timestamps
	sleep 1s

	exit ${RETURN}
}

# shellcheck source=timestamping.sh
source "$(dirname "$(realpath "$0")")/timestamping.sh"

if_enabled in_environment generate_timestamps $1
