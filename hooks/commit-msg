#!/usr/bin/env bash

#	Automated Timestamping
#
#	Copyright (c) 2021 Johannes Milczewski
#
#	Permission is hereby granted, free of charge, to any person obtaining a copy
#	of this software and associated documentation files (the "Software"), to deal
#	in the Software without restriction, including without limitation the rights
#	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#	copies of the Software, and to permit persons to whom the Software is
#	furnished to do so, subject to the following conditions:
#
#	The above copyright notice and this permission notice shall be included in all
#	copies or substantial portions of the Software.
#
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#	SOFTWARE.

function hook_echo() {
	local TAG="commit-msg"
	echo -e "[\e[0;32m${TAG}\e[0m]: $1"
}

if [ $# -eq 0 ]; then
	echo 'Call this script only through "git commit".'
	exit 4
fi

function generate_timestamps() {
	# Quit if timestamping.sh is not configured
	if [ $# -eq 0 ]; then
		exit 0
	fi

	# Get current branch
	local BRANCH
	BRANCH=$(get_branch)

	# Return if already on signing branch
	if on_signing_branch; then
		exit 0
	fi

	hook_echo "Branch is ${BRANCH}"

	# Get applicable diff of staged files
	hook_echo "Creating diff"
	local DIFF
	DIFF=$(get_diff)
	if [[ $? -eq 3 ]]; then
		hook_echo 'ERROR: ts.diff.type must be either "staged" or "full"'
	fi

	# Get commit message
	local COMMIT_MSG_FILE=$1
	local COMMIT_MSG
	COMMIT_MSG=$(cat "${COMMIT_MSG_FILE}")

	# Stash changes to be committed
	! git rev-parse HEAD >/dev/null 2>/dev/null || git stash >/dev/null 2>/dev/null

	# Create signing branch if non-existent
	check_out_signing_or_root "${BRANCH}"

	# Write diff file
	write_diff "${DIFF}"

	create_and_commit_timestamps
	RETURN=$?

	# Checkout original branch
	check_out_actual "${BRANCH}"

	# Remove timestamping files
	rm -rf "${TS_SERVER_DIRECTORY:?}/" "${TS_DIFF_FILE}" ".gitattributes"
	git reset -- "${TS_SERVER_DIRECTORY:?}/"* "${TS_DIFF_FILE}" ".gitattributes" >/dev/null 2>/dev/null

	# Restore original commit message
	echo "${COMMIT_MSG}" >"${COMMIT_MSG_FILE}"

	# Unstash changes to be committed
	! git rev-parse HEAD >/dev/null 2>/dev/null || git stash pop >/dev/null 2>/dev/null

	# Wait one second for different commit timestamps
	sleep 1s

	exit ${RETURN}
}

function ts-commit-msg() {
	# shellcheck source=timestamping.sh
	source "$(dirname "$(realpath "$0")")/timestamping.sh"

	if_enabled in_environment generate_timestamps "$1"
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
	ts-commit-msg "$1"
fi
