#!/usr/bin/env bash

function hook_echo() {
	echo -e "[\e[0;32mcommit-msg\e[0m]: $1"
}

if [ $# -eq 0 ]; then
	echo 'Call this script only through "git commit".'
	exit 4
fi

function generate_timestamps() {
	# Quit if timestamping.sh is not configured
	if [ $? -ne 0 ]; then
		exit 0
	fi

	# Get current branch
	local BRANCH
	BRANCH=$(git symbolic-ref --short HEAD) 2>/dev/null
	if [ $? -ne 0 ]; then
		BRANCH=$(git config init.defaultBranch) 2>/dev/null
		if [ $? -ne 0 ]; then
			BRANCH="master"
		fi
	fi

	# Return if already on signing branch
	if [[ ${BRANCH} == ${TS_BRANCH_PREFIX}/* ]] || [[ ${BRANCH} == "${TS_BRANCH_PREFIX}-" ]]; then
		exit 0
	fi

	hook_echo "Branch is ${BRANCH}"

	# Get signing branch name
	local SIGNING_BRANCH
	SIGNING_BRANCH="${TS_BRANCH_PREFIX}/${BRANCH}"

	# Get applicable diff of staged files
	local DIFF=""

	hook_echo "Creating diff"
	if [[ "${TS_DIFF_TYPE}" == "staged" ]]; then
		DIFF=$(git diff --staged --full-index --binary)
	elif [[ "${TS_DIFF_TYPE}" == "full" ]]; then
		DIFF=$(git diff --staged --full-index --binary "$(git hash-object -t tree /dev/null)")
	else
		hook_echo 'ERROR: ts.diff.type must be either "staged" or "full"'
		exit 3
	fi

	# Get commit message
	local COMMIT_MSG_FILE=$1
	local COMMIT_MSG
	COMMIT_MSG=$(cat "${COMMIT_MSG_FILE}")

	# Stash changes to be committed
	! git rev-parse HEAD >/dev/null 2>/dev/null || git stash >/dev/null 2>/dev/null

	# Create signing branch if non-existent
	hook_echo "Switch to signing branch"
	if git rev-parse --verify "${SIGNING_BRANCH}" >/dev/null 2>/dev/null; then
		git checkout "${SIGNING_BRANCH}" -- ${TS_DIFF_FILE} ${TS_SERVER_DIRECTORY}/* >/dev/null 2>/dev/null
	else
		git checkout "${TS_BRANCH_PREFIX}-" >/dev/null 2>/dev/null
	fi

	# Write diff file
	echo "${TS_DIFF_NOTICE}" >"${TS_DIFF_FILE}"
	echo "${DIFF}" >>"${TS_DIFF_FILE}"
	echo "" >>"${TS_DIFF_FILE}"

	create_and_commit_timestamps
	RETURN=$?

	# Checkout original branch
	if git rev-parse --verify "${BRANCH}" >/dev/null 2>/dev/null; then
		hook_echo "Restoring stage on ${BRANCH}"
		git checkout "${BRANCH}" >/dev/null 2>/dev/null
	else
		hook_echo "Restoring stage on orphaned ${BRANCH}"
		git checkout --orphan "${BRANCH}" >/dev/null 2>/dev/null
	fi

	# Remove timestamping files
	rm -rf "${TS_SERVER_DIRECTORY:?}/" "${TS_DIFF_FILE}" ".gitattributes"
	git reset -- ${TS_SERVER_DIRECTORY:?}/* "${TS_DIFF_FILE}" ".gitattributes" >/dev/null 2>/dev/null

	# Restore original commit message
	echo "${COMMIT_MSG}" >"${COMMIT_MSG_FILE}"

	# Unstash changes to be committed
	! git rev-parse HEAD >/dev/null 2>/dev/null || git stash pop >/dev/null 2>/dev/null

	# Wait one second for different commit timestamps
	sleep 1s

	exit ${RETURN}
}

# shellcheck source=timestamping.sh
source "$(dirname "$(realpath "$0")")/timestamping.sh"

if_enabled in_environment generate_timestamps $1
