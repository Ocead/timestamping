#!/usr/bin/env bash

function hook_echo() {
	echo -e "[\e[0;32mpost-commit\e[0m]: $1"
}

function relate_timestamps() {
	local BRANCH
	BRANCH=$(git symbolic-ref --short HEAD)
	if [ $? -ne 0 ]; then
		BRANCH=$(git config init.defaultBranch)
		if [ $? -ne 0 ]; then
			BRANCH="master"
		fi
	fi

	if [[ ${BRANCH} == ${TS_BRANCH_PREFIX}/* ]]; then
		exit 0
	elif [[ "${BRANCH}" == "${TS_BRANCH_PREFIX}-" ]]; then
		COMMIT_ID=$(git rev-parse HEAD)
		update_timestamps "${COMMIT_ID}" "${BRANCH}"
	elif [[ -f "${GIT_DIR}/TIMESTAMP" ]]; then
		COMMIT_ID=$(git rev-parse HEAD)
		hook_echo "Commit ID is ${COMMIT_ID}"

		local SIGNING_BRANCH="${TS_BRANCH_PREFIX}/${BRANCH}"

		if git rev-parse --verify "${SIGNING_BRANCH}" >/dev/null 2>/dev/null; then
			hook_echo "Checking out signing branch"

			local STASH
			maybe_stash
			STASH=$?
			git checkout "${SIGNING_BRANCH}"

			hook_echo "Merging ${BRANCH} into ${SIGNING_BRANCH}"
			git merge \
				--allow-unrelated-histories \
				--strategy ours \
				--message "Relate commit '${COMMIT_ID}' to ${SIGNING_BRANCH}" \
				"${COMMIT_ID}"
			rm "${GIT_DIR}/TIMESTAMP"

			git checkout "${BRANCH}" >/dev/null 2>/dev/null

			maybe_unstash ${STASH}
		else
			hook_echo "Checking out new signing branch"
			git checkout --orphan "${SIGNING_BRANCH}" >/dev/null 2>/dev/null
		fi
	fi
}

# shellcheck source=timestamping.sh
source "$(dirname "$(realpath "$0")")/timestamping.sh"

if_enabled in_environment relate_timestamps
