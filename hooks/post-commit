#!/usr/bin/env bash

#	Automated Timestamping
#
#	Copyright (c) 2021 Johannes Milczewski
#
#	Permission is hereby granted, free of charge, to any person obtaining a copy
#	of this software and associated documentation files (the "Software"), to deal
#	in the Software without restriction, including without limitation the rights
#	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#	copies of the Software, and to permit persons to whom the Software is
#	furnished to do so, subject to the following conditions:
#
#	The above copyright notice and this permission notice shall be included in all
#	copies or substantial portions of the Software.
#
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#	SOFTWARE.

function hook_echo() {
	local TAG="post-commit"
	echo -e "[\e[0;32m${TAG}\e[0m]: $1"
}

function relate_timestamps() {
	local BRANCH
	BRANCH=$(get_branch)

	if [[ ${BRANCH} == ${TS_BRANCH_PREFIX}/* ]]; then
		exit 0
	elif [[ "${BRANCH}" == "${TS_BRANCH_PREFIX}-" ]]; then
		COMMIT_ID=$(git rev-parse HEAD)
		update_timestamps "${COMMIT_ID}" "${BRANCH}"
	elif [[ -n "${GIT_DIR}" && -f "${GIT_DIR}/TIMESTAMP" ]] || [[ -f "${PWD}/.git/TIMESTAMP" ]]; then
		COMMIT_ID=$(git rev-parse HEAD)
		hook_echo "Commit ID is ${COMMIT_ID}"

		local SIGNING_BRANCH
		SIGNING_BRANCH=$(get_signing_branch "${BRANCH}")

		if git rev-parse --verify "${SIGNING_BRANCH}" >/dev/null 2>/dev/null; then
			hook_echo "Checking out signing branch"

			local STASH
			maybe_stash
			STASH=$?
			git checkout "${SIGNING_BRANCH}" >/dev/null 2>/dev/null

			hook_echo "Merging ${BRANCH} into ${SIGNING_BRANCH}"
			relate_branches "Relate commit '${COMMIT_ID}' to ${SIGNING_BRANCH}" "${COMMIT_ID}"
			if [[ -n "${GIT_DIR}" ]]; then
				rm "${GIT_DIR}/TIMESTAMP"
			else
				rm "${PWD}/.git/TIMESTAMP"
			fi

			git checkout "${BRANCH}" >/dev/null 2>/dev/null

			maybe_unstash ${STASH}
		else
			hook_echo "Checking out new signing branch"
			git checkout --orphan "${SIGNING_BRANCH}" >/dev/null 2>/dev/null
		fi
	fi
}

function ts-post-commit() {
	# shellcheck source=timestamping.sh
	source "$(dirname "$(realpath "$0")")/timestamping.sh"

	if_enabled in_environment relate_timestamps
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
	ts-post-commit
fi
