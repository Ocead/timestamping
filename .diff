Written by Johannes Milczewski
diff --git a/config.sh b/config.sh
old mode 100644
new mode 100755
diff --git a/hooks/commit-msg b/hooks/commit-msg
index 7f947d428daef7585dd49f20b6e233366ef1c391..fbe47a6ced1426c07810e9b194d9e1c406d5ca66 100644
--- a/hooks/commit-msg
+++ b/hooks/commit-msg
@@ -2,7 +2,7 @@
 
 #	Automated Timestamping
 #
-#	Copyright (c) 2021 Johannes Milczewski
+#	Copyright (c) 2021 - 2022 Johannes Milczewski
 #
 #	Permission is hereby granted, free of charge, to any person obtaining a copy
 #	of this software and associated documentation files (the "Software"), to deal
@@ -27,6 +27,11 @@ function hook_echo() {
 	echo -e "[\e[0;32m${TAG}\e[0m]: $1"
 }
 
+function hook_error() {
+  local TAG="commit-msg"
+  echo -e "[\e[0;31m${TAG}\e[0m]: $1"
+}
+
 function ts-commit-msg_impl() {
 	if [[ -z ${GIT_DIR+x} || $# -lt 1 ]]; then
 		die 'Call this script only through "git commit".'
diff --git a/hooks/post-commit b/hooks/post-commit
index b030282d4017b37816c0da0b414ebc1e80f92fe6..d5e57107bfb1fbe3b8470b1cb4367a36913b8164 100644
--- a/hooks/post-commit
+++ b/hooks/post-commit
@@ -2,7 +2,7 @@
 
 #	Automated Timestamping
 #
-#	Copyright (c) 2021 Johannes Milczewski
+#	Copyright (c) 2021 - 2022 Johannes Milczewski
 #
 #	Permission is hereby granted, free of charge, to any person obtaining a copy
 #	of this software and associated documentation files (the "Software"), to deal
@@ -27,6 +27,11 @@ function hook_echo() {
 	echo -e "[\e[0;32m${TAG}\e[0m]: $1"
 }
 
+function hook_error() {
+  local TAG="post-commit"
+  echo -e "[\e[0;31m${TAG}\e[0m]: $1"
+}
+
 function relate_commits() {
 	local COMMIT_ID=$1
 	local BRANCH=$2
diff --git a/hooks/pre-push b/hooks/pre-push
index 5ba76eef7400ec1140f7a1f99a98f7ba38a41542..6dbbe9637343f6aff0365c7721d95fad3e432add 100644
--- a/hooks/pre-push
+++ b/hooks/pre-push
@@ -2,7 +2,7 @@
 
 #	Automated Timestamping
 #
-#	Copyright (c) 2021 Johannes Milczewski
+#	Copyright (c) 2021 - 2022 Johannes Milczewski
 #
 #	Permission is hereby granted, free of charge, to any person obtaining a copy
 #	of this software and associated documentation files (the "Software"), to deal
@@ -27,6 +27,11 @@ function hook_echo() {
 	echo -e "[\e[0;32m${TAG}\e[0m]: $1"
 }
 
+function hook_error() {
+	local TAG="pre-push"
+	echo -e "[\e[0;31m${TAG}\e[0m]: $1"
+}
+
 function ts-pre-push_impl() {
 	if [ $# -lt 2 ]; then
 		echo "$#"
diff --git a/hooks/timestamping.sh b/hooks/timestamping.sh
index ffd9e0f6c7c98a703cf79c7ac222f25e27295b70..03fafb505e82241b097f0d7e8e869f78f864968e 100644
--- a/hooks/timestamping.sh
+++ b/hooks/timestamping.sh
@@ -2,7 +2,7 @@
 
 #	Automated Timestamping
 #
-#	Copyright (c) 2021 Johannes Milczewski
+#	Copyright (c) 2021 - 2022 Johannes Milczewski
 #
 #	Permission is hereby granted, free of charge, to any person obtaining a copy
 #	of this software and associated documentation files (the "Software"), to deal
@@ -110,13 +110,13 @@ function in_environment() {
 			echo 'Run "git config ts.branch.remote" to set the how remote and local signing branch are managed'
 			RETURN=$TS_ERROR_CONFIG_UNSET
 		elif [[ ${TS_BRANCH_REMOTE} != "default" && ${TS_BRANCH_REMOTE} != "merge" && ${TS_BRANCH_REMOTE} != "rebase" && ${TS_BRANCH_REMOTE} != "keep" ]]; then
-			echo 'ERROR: ts.branch.remote must be either "merge" or "rebase" or "keep"'
+			hook_error 'ERROR: ts.branch.remote must be either "merge" or "rebase" or "keep"'
 		fi
 		if ! TS_BRANCH_WITHHOLD=$(git config ts.branch.withhold); then
 			echo 'Run "git config ts.branch.withhold" to set whether timestamp commits should be withheld from remotes'
 			RETURN=$TS_ERROR_CONFIG_UNSET
 		elif [[ ${TS_BRANCH_WITHHOLD} != "true" && ${TS_BRANCH_WITHHOLD} != "false" ]]; then
-			echo 'ERROR: ts.branch.withhold must be either "true" or "false"'
+			hook_error 'ERROR: ts.branch.withhold must be either "true" or "false"'
 			RETURN $TS_ERROR_CONFIG_INVALID
 		fi
 
@@ -132,7 +132,7 @@ function in_environment() {
 			echo 'Run "git config ts.commit.relate" to set whether timestamp and actual commits should be merged afterwards'
 			RETURN=$TS_ERROR_CONFIG_UNSET
 		elif [[ ${TS_COMMIT_RELATE} != "true" && ${TS_COMMIT_RELATE} != "false" ]]; then
-			echo 'ERROR: ts.commit.relate must be either "true" or "false"'
+			hook_error 'ERROR: ts.commit.relate must be either "true" or "false"'
 			RETURN $TS_ERROR_CONFIG_INVALID
 		fi
 
@@ -148,7 +148,7 @@ function in_environment() {
 			echo 'run "git config ts.diff.type" to set how the diff is created'
 			RETURN=$TS_ERROR_CONFIG_UNSET
 		elif [[ ${TS_DIFF_TYPE} != "staged" && ${TS_DIFF_TYPE} != "full" ]]; then
-			echo 'ERROR: ts.diff.type must be either "staged" or "full"'
+			hook_error 'ERROR: ts.diff.type must be either "staged" or "full"'
 			RETURN $TS_ERROR_CONFIG_INVALID
 		fi
 
@@ -156,7 +156,7 @@ function in_environment() {
 			echo 'Run "git config ts.server.update" to set whether existing timestamps should be updated on TSA config changes'
 			RETURN=$TS_ERROR_CONFIG_UNSET
 		elif [[ ${TS_SERVER_UPDATE} != "true" && ${TS_SERVER_UPDATE} != "false" ]]; then
-			echo 'ERROR: ts.server.update must be either "true" or "false"'
+			hook_error 'ERROR: ts.server.update must be either "true" or "false"'
 			RETURN $TS_ERROR_CONFIG_INVALID
 		fi
 		if ! TS_SERVER_DIRECTORY=$(git config ts.server.directory); then
@@ -193,7 +193,7 @@ function in_environment() {
 			echo 'Run "git config ts.response.verify" to set whether the timestamp response file is verified after'
 			RETURN=$TS_ERROR_CONFIG_UNSET
 		elif [[ ${TS_RESPONSE_VERIFY} != "true" && ${TS_RESPONSE_VERIFY} != "false" ]]; then
-			echo 'ERROR: ts.response.verify must be either "true" or "false"'
+			hook_error 'ERROR: ts.response.verify must be either "true" or "false"'
 			RETURN $TS_ERROR_CONFIG_INVALID
 		fi
 
@@ -322,7 +322,7 @@ function verify_timestamp() {
 		-data "${DATA_FILE}" \
 		-CAfile "${SERVER_DIRECTORY}/${TS_SERVER_CERTIFICATE}" \
 		>/dev/null 2>/dev/null; then
-		return $TS_ERROR_VERIFY_REQUEST
+		return $TS_ERROR_VERIFY_DATA
 	fi
 
 	return $TS_OK
@@ -393,10 +393,10 @@ function create_timestamp() {
 		RESULT=$?
 		case "${RESULT}" in
 		"${TS_ERROR_VERIFY_REQUEST}")
-			hook_echo "ERROR: Timestamp from ${SERVER_DIRECTORY} could not be verified against request!"
+			hook_error "ERROR: Timestamp from ${SERVER_DIRECTORY} could not be verified against request!"
 			;;
 		"${TS_ERROR_VERIFY_DATA}")
-			hook_echo "ERROR: Timestamp from ${SERVER_DIRECTORY} could not be verified against diff!"
+			hook_error "ERROR: Timestamp from ${SERVER_DIRECTORY} could not be verified against diff!"
 			;;
 		0) ;;
 		esac
@@ -490,7 +490,7 @@ function update_timestamps() {
 				SIG_COUNT=$((SIG_COUNT + 1))
 			else
 				ERR_COUNT=$((ERR_COUNT + 1))
-				hook_echo "ERROR: Could not create timestamp for ${d}"
+				hook_error "ERROR: Could not create timestamp for ${d}"
 			fi
 		done
 
@@ -525,6 +525,7 @@ function maybe_stash() {
 		git stash push >/dev/null 2>/dev/null && hook_echo "Stashing changes"
 		return $?
 	else
+	  hook_echo "Nothing to stash"
 		return 1
 	fi
 }
@@ -536,6 +537,8 @@ function maybe_unstash() {
 	if [[ $1 == 0 ]]; then
 		hook_echo "Unstashing changes"
 		git stash pop >/dev/null 2>/dev/null
+  else
+    hook_echo "Nothing to unstash"
 	fi
 }
 # endregion
@@ -809,7 +812,7 @@ function write_tsa_diff() {
 
 # region Commits
 
-# Adds the timestamping files to the staging area
+# Adds the timestamping files to the staging area^
 function add_ts_files() {
 	git add --force -- "${TS_DIFF_FILE}" "${TS_SERVER_DIRECTORY}/"*
 	return $?
diff --git a/test/test.sh b/test/test.sh
index 1942012e6ae07ddbf5add1eb722ffb0b04a0101f..e679b1501d3bbcb533c276c1a6b05fd08f51c68d 100644
--- a/test/test.sh
+++ b/test/test.sh
@@ -6,10 +6,15 @@ function echo_error() {
 	exit 254
 }
 
+function configure_repo() {
+  git config user.name "test"
+  git config user.email "text@test.net"
+}
+
 # Adds a TSA configuration to the repository
 function add_tsa() {
 	git checkout "sig/root"
-	mkdir "./rfc3161/zeitstempel.dfn.de"
+	mkdir -p "./rfc3161/zeitstempel.dfn.de"
 	curl "https://pki.pca.dfn.de/dfn-ca-global-g2/pub/cacert/chain.txt" >"./rfc3161/zeitstempel.dfn.de/cacert.pem"
 	git add "./rfc3161/zeitstempel.dfn.de/cacert.pem"
 	git commit -m "Added simple TSA" "./rfc3161/zeitstempel.dfn.de/cacert.pem"
@@ -26,7 +31,7 @@ function add_tsa() {
 # Adds a TSA configuration with custom URL to the repository
 function add_custom_url_tsa() {
 	git checkout "sig/root"
-	mkdir "./rfc3161/freetsa"
+	mkdir -p "./rfc3161/freetsa"
 	curl "https://freetsa.org/files/cacert.pem" >"./rfc3161/freetsa/cacert.pem"
 	echo "https://freetsa.org/tsr" >"./rfc3161/freetsa/url"
 	git add "./rfc3161/freetsa/cacert.pem" "./rfc3161/freetsa/url"
@@ -44,9 +49,10 @@ function add_custom_url_tsa() {
 # Adds a TSA configuration with custom diff to the repository
 function add_custom_diff_tsa() {
 	git checkout "sig/root"
-	mkdir "./rfc3161/timestamp.digicert.com"
+	mkdir -p "./rfc3161/timestamp.digicert.com"
 	curl "https://knowledge.digicert.com/content/dam/digicertknowledgebase/attachments/time-stamp/DigiCertAssuredIDRootCA_comb.crt.pem" >"./rfc3161/timestamp.digicert.com/cacert.pem"
 	echo "echo 'Gnampf'" >"./rfc3161/timestamp.digicert.com/diff.sh"
+	chmod +x "./rfc3161/timestamp.digicert.com/diff.sh"
 	git add "./rfc3161/timestamp.digicert.com/cacert.pem" "./rfc3161/timestamp.digicert.com/diff.sh"
 	git commit -m "Added custom diff TSA" ./rfc3161/timestamp.digicert.com/*
 
@@ -62,8 +68,9 @@ function add_custom_diff_tsa() {
 # Adds a TSA configuration with custom certificate to the repository
 function add_custom_cacert_tsa() {
 	git checkout "sig/root"
-	mkdir "./rfc3161/timestamp.digicert.com"
+	mkdir -p "./rfc3161/timestamp.digicert.com"
 	echo 'curl "https://knowledge.digicert.com/content/dam/digicertknowledgebase/attachments/time-stamp/DigiCertAssuredIDRootCA_comb.crt.pem"' >"./rfc3161/timestamp.digicert.com/cacert.sh"
+	chmod +x "./rfc3161/timestamp.digicert.com/cacert.sh"
 	git add "./rfc3161/timestamp.digicert.com/cacert.sh"
 	git commit -m "Added custom certificate TSA" ./rfc3161/timestamp.digicert.com/*
 
@@ -79,9 +86,10 @@ function add_custom_cacert_tsa() {
 # Adds a TSA configuration with custom request to the repository
 function add_custom_request_tsa() {
 	git checkout "sig/root"
-	mkdir "./rfc3161/timestamp.digicert.com"
+	mkdir -p "./rfc3161/timestamp.digicert.com"
 	curl "https://knowledge.digicert.com/content/dam/digicertknowledgebase/attachments/time-stamp/DigiCertAssuredIDRootCA_comb.crt.pem" >"./rfc3161/timestamp.digicert.com/cacert.pem"
 	echo "openssl ts -query -cert -sha512 <&0" >"./rfc3161/timestamp.digicert.com/request.sh"
+	chmod +x "./rfc3161/timestamp.digicert.com/request.sh"
 	git add "./rfc3161/timestamp.digicert.com/cacert.pem" "./rfc3161/timestamp.digicert.com/request.sh"
 	git commit -m "Added custom request TSA" ./rfc3161/timestamp.digicert.com/*
 
@@ -97,9 +105,10 @@ function add_custom_request_tsa() {
 # Adds a TSA configuration with custom response to the repository
 function add_custom_response_tsa() {
 	git checkout "sig/root"
-	mkdir "./rfc3161/freetsa"
+	mkdir -p "./rfc3161/freetsa"
 	curl "https://freetsa.org/files/cacert.pem" >"./rfc3161/freetsa/cacert.pem"
 	echo "curl --silent --header 'Content-Type: application/timestamp-query' --data-binary '@-' 'https://freetsa.org/tsr' <&0" >"./rfc3161/freetsa/response.sh"
+	chmod +x "./rfc3161/freetsa/response.sh"
 	git add "./rfc3161/freetsa/cacert.pem" "./rfc3161/freetsa/response.sh"
 	git commit -m "Added custom response TSA" ./rfc3161/freetsa/*
 
@@ -175,6 +184,8 @@ if [[ -z "${TEST_NAME}" || ${TEST_NAME} == *"repo-empty"* || ${TEST_NAME} == "re
 	mkdir -p "${REPO_PATH}"
 	git --git-dir="${REPO_PATH}/.git" init
 	(
+	  cd "${REPO_PATH}" || exit 255
+    configure_repo
 		echo ""
 	)
 	./config.sh -d "${REPO_PATH}"
@@ -206,6 +217,7 @@ if [[ -z "${TEST_NAME}" || ${TEST_NAME} == *"repo-unstaged"* || ${TEST_NAME} ==
 	git --git-dir="${REPO_PATH}/.git" init
 	(
 		cd "${REPO_PATH}" || exit 255
+    configure_repo
 		echo "Gnampf" >"./a.txt"
 	)
 	./config.sh --default "${REPO_PATH}"
@@ -236,6 +248,8 @@ if [[ -z "${TEST_NAME}" || ${TEST_NAME} == *"repo-uncommitted"* || ${TEST_NAME}
 	git --git-dir="${REPO_PATH}/.git" init
 	(
 		cd "${REPO_PATH}" || exit 255
+		git config user.name "test"
+    git config user.email "text@test.net"
 		echo "Gnampf" >"./a.txt"
 		git add "./a.txt"
 	)
@@ -266,6 +280,8 @@ if [[ -z "${TEST_NAME}" || ${TEST_NAME} == *"repo-committed"* || ${TEST_NAME} ==
 	git --git-dir="${REPO_PATH}/.git" init
 	(
 		cd "${REPO_PATH}" || exit 255
+		git config user.name "test"
+    git config user.email "text@test.net"
 		echo "Gnampf" >"./a.txt"
 		git add "./a.txt"
 		git commit -m "Initial commit"
@@ -296,6 +312,8 @@ if [[ -z "${TEST_NAME}" || ${TEST_NAME} == *"repo-staged"* || ${TEST_NAME} == "r
 	git --git-dir="${REPO_PATH}/.git" init
 	(
 		cd "${REPO_PATH}" || exit 255
+		git config user.name "test"
+    git config user.email "text@test.net"
 		echo "Gnampf" >"./a.txt"
 		git add "./a.txt"
 		git commit -m "Initial commit"
@@ -329,6 +347,8 @@ if [[ -z "${TEST_NAME}" || ${TEST_NAME} == *"repo-no-tsa"* || ${TEST_NAME} == "r
 	git --git-dir="${REPO_PATH}/.git" init
 	(
 		cd "${REPO_PATH}" || exit 255
+		git config user.name "test"
+    git config user.email "text@test.net"
 		echo "Gnampf" >"./a.txt"
 		git add "./a.txt"
 		git commit -m "Initial commit"
@@ -356,6 +376,8 @@ if [[ -z "${TEST_NAME}" || ${TEST_NAME} == *"custom-url"* || ${TEST_NAME} == "cu
 	mkdir -p "${REPO_PATH}"
 	git --git-dir="${REPO_PATH}/.git" init
 	(
+    cd "${REPO_PATH}" || exit 255
+    configure_repo
 		echo ""
 	)
 	./config.sh -d "${REPO_PATH}"
@@ -387,6 +409,8 @@ if [[ -z "${TEST_NAME}" || ${TEST_NAME} == *"custom-diff"* || ${TEST_NAME} == "c
 	mkdir -p "${REPO_PATH}"
 	git --git-dir="${REPO_PATH}/.git" init
 	(
+    cd "${REPO_PATH}" || exit 255
+    configure_repo
 		echo ""
 	)
 	./config.sh -d "${REPO_PATH}"
@@ -418,6 +442,8 @@ if [[ -z "${TEST_NAME}" || ${TEST_NAME} == *"custom-certificate"* || ${TEST_NAME
 	mkdir -p "${REPO_PATH}"
 	git --git-dir="${REPO_PATH}/.git" init
 	(
+	  cd "${REPO_PATH}" || exit 255
+    configure_repo
 		echo ""
 	)
 	./config.sh -d "${REPO_PATH}"
@@ -449,6 +475,8 @@ if [[ -z "${TEST_NAME}" || ${TEST_NAME} == *"custom-request"* || ${TEST_NAME} ==
 	mkdir -p "${REPO_PATH}"
 	git --git-dir="${REPO_PATH}/.git" init
 	(
+	  cd "${REPO_PATH}" || exit 255
+    configure_repo
 		echo ""
 	)
 	./config.sh -d "${REPO_PATH}"
@@ -480,6 +508,8 @@ if [[ -z "${TEST_NAME}" || ${TEST_NAME} == *"custom-response"* || ${TEST_NAME} =
 	mkdir -p "${REPO_PATH}"
 	git --git-dir="${REPO_PATH}/.git" init
 	(
+	  cd "${REPO_PATH}" || exit 255
+    configure_repo
 		echo ""
 	)
 	./config.sh -d "${REPO_PATH}"

